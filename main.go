package main

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
)

type ExploitDb struct {
	Exploit_id                float64 `json:"exploit_id"`
	Exploit_file              string  `json:"exploit_file"`
	Exploit_description       string  `json:"exploit_description"`
	Exploit_date_published_at string  `json:"exploit_date_published_at"`
	Exploit_author_name       string  `json:"exploit_author_name"`
	Exploit_type              string  `json:"exploit_type"`
	Exploit_platform          string  `json:"exploit_platform"`
	Exploit_port              float64 `json:"exploit_port"`
	Exploit_date_added        string  `json:"exploit_date_added"`
	Exploit_date_updated      string  `json:"exploit_date_updated"`
	Exploit_vervied           bool    `json:"exploit_vervied"`
	Exploit_cve_id            string  `json:"exploit_cve_id"`
	Exploit_tags              string  `json:"exploit_tags"`
	Exploit_aliases           string  `json:"exploit_aliases"`
	Exploit_screenshot_url    string  `json:"exploit_screenshot_url"`
	Exploit_application_url   string  `json:"exploit_application_url"`
	Exploit_refrence_url      string  `json:"exploit_refrence_url"`
	Exploit_url               string  `json:"exploit_url"`
}

func Convert_to_float64(v interface{}) (float64, error) {
	switch v.(type) {
	case string:
		return strconv.ParseFloat(v.(string), 64)
	case float64:
		return v.(float64), nil
	default:
		return 0, fmt.Errorf("can't convert %T to float64", v)
	}
}

func convert_string_to_bool(v interface{}) (bool, error) {
	switch v.(type) {
	case string:
		return strconv.ParseBool(v.(string))
	case bool:
		return v.(bool), nil
	default:
		return false, fmt.Errorf("can't convert %T to bool", v)
	}
}

func pasrse_csv() {

	url := "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv?inline=false"
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	reader := csv.NewReader(resp.Body)

	Ex := &ExploitDb{}
	var data = make(map[uint64]ExploitDb)

	for {
		line, err := reader.Read()
		if err == io.EOF {
			break
		} else if err != nil {
			log.Fatal(err)
		}
		Ex.Exploit_id, _ = Convert_to_float64(line[0])
		Ex.Exploit_file = line[1]
		Ex.Exploit_description = line[2]
		Ex.Exploit_date_published_at = line[3]
		Ex.Exploit_author_name = line[4]
		Ex.Exploit_type = line[5]
		Ex.Exploit_platform = line[6]
		Ex.Exploit_port, _ = Convert_to_float64(line[7])
		Ex.Exploit_date_added = line[8]
		Ex.Exploit_date_updated = line[9]
		Ex.Exploit_vervied, _ = convert_string_to_bool(line[10])
		if Ex.Exploit_cve_id == "" {
			Ex.Exploit_cve_id = "None"
		} else {
			Ex.Exploit_cve_id = line[11]
		}
		Ex.Exploit_cve_id = line[11]
		Ex.Exploit_tags = line[12]
		Ex.Exploit_aliases = line[13]
		Ex.Exploit_screenshot_url = line[14]
		Ex.Exploit_application_url = line[15]
		Ex.Exploit_refrence_url = line[16]
		Ex.Exploit_url = fmt.Sprintf("https://www.exploit-db.com/exploits/%v", Ex.Exploit_id)
		data[uint64(Ex.Exploit_id)] = *Ex

	}

	json.NewEncoder(os.Stdout).Encode(data)

}

func main() {
	pasrse_csv()
}
